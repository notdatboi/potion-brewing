#once

; Default paths and settings
.CppStandard = '17'
#if __WINDOWS__
.VS2017BasePath = 'C:\Program Files (x86)\Microsoft Visual Studio\2017\Community'
.VS2017Version = '14.16.27023'

.VS2017ToolBinPath = '$VS2017BasePath$\VC\Tools\MSVC\$VS2017Version$\bin\Host' ; without platform folder and part of host folder name (example: ...\bin\Hostx64\x64)

.WindowsSDKBasePath = 'C:\Program Files (x86)\Windows Kits\10'
.WindowsSDKVersion = '10.0.17763.0'

.WindowsLibPath = '$WindowsSDKBasePath$\Lib\$WindowsSDKVersion$\um' ; without platform folder
.WindowsIncludePath = '$WindowsSDKBasePath$\Include\$WindowsSDKVersion$\um'
.WindowsSharedIncludePath = '$WindowsSDKBasePath$\Include\$WindowsSDKVersion$\shared'
.WindowsUcrtLibPath = '$WindowsSDKBasePath$\Lib\$WindowsSDKVersion$\ucrt' ; without platform folder
.WindowsUcrtIncludePath = '$WindowsSDKBasePath$\Include\$WindowsSDKVersion$\ucrt'

.DefaultPlatform = 'x64' ; platforms are not used for build, choose appropriate configuration instead

.PlatformToolset = 'v141'
#else
.GCCBinariesPath = '/usr/bin'
#endif


.Platforms = {'x86', 'x64'}
.Configs = {'Debug', 'Release'}

#if __WINDOWS__
ForEach(.Platform in .Platforms)
{
	Compiler('Compiler-MSVC-$Platform$')
	{
		.Root = '$VS2017ToolBinPath$$Platform$\$Platform$'
		.Executable = '$Root$\cl.exe'
		.ExtraFiles = 
		{
			'$Root$\c1.dll'
			'$Root$\c1xx.dll',
			'$Root$\c2.dll',
			;'$Root$\atlprov.dll', ; Only needed if using ATL
			'$Root$\msobj140.dll'
			'$Root$\mspdb140.dll'
			'$Root$\mspdbcore.dll'
			'$Root$\mspdbsrv.exe'
			'$Root$\mspft140.dll'
			'$Root$\msvcp140.dll'
			'$Root$\vcruntime140.dll'
			'$Root$\1033\clui.dll'
		}
	}
}
#else
Compiler('Compiler-GCC')
{
	.Root = '$GCCBinariesPath$'
	.Executable = '$Root$/g++'
}
#endif

#if __WINDOWS__
.MSVCBuilderCommonConfig = 
[
	.CompilerOptions = '"%1"' ; input
		+ ' /Fo"%2"' ; output
		+ ' /Z7' ; debug format (in .obj)
		+ ' /c' ; compile only
		+ ' /nologo' ; no compiler spam
		+ ' /W4' ; warning level 4
		+ ' /TP' ; all files are c++
		+ ' /std:c++$CppStandard$' ; c++ standard
		;+ ' /WX' ; warnings as errors
	
	.LinkerOptions = ' /OUT:"%2"' ; output
		+ ' "%1"' ; input
		;+ ' /WX' ; warnings as errors
		+ ' /NOLOGO' ; no linker spam
		+ ' /DEBUG' ; keep debug info when linking
		
	.LibrarianOptions = '/NOLOGO /OUT:"%2" "%1"' ; add /WX later
]

.MSVCBuilderConfig_x64 =
[
	.Platform = 'x64'
	
	Using(.MSVCBuilderCommonConfig)

	.LibPaths = ' /LIBPATH:"$VS2017BasePath$\VC\Tools\MSVC\$VS2017Version$\lib\$Platform$"'
		+ ' /LIBPATH:"$WindowsLibPath$\$Platform$"'
		+ ' /LIBPATH:"$WindowsUcrtLibPath$\$Platform$"'
	.LinkerOptions + .LibPaths

	.Compiler = 'Compiler-MSVC-$Platform$'
	.Linker = '$VS2017ToolBinPath$$Platform$\$Platform$\link.exe'	
	.Librarian = '$VS2017ToolBinPath$$Platform$\$Platform$\lib.exe'
]

.MSVCBuilderConfig_x86 =
[
	.Platform = 'x86'
	
	Using(.MSVCBuilderCommonConfig)

	.LibPaths = ' /LIBPATH:"$VS2017BasePath$\VC\Tools\MSVC\$VS2017Version$\lib\$Platform$"'
		+ ' /LIBPATH:"$WindowsLibPath$\$Platform$"'
		+ ' /LIBPATH:"$WindowsUcrtLibPath$\$Platform$"'
	.LinkerOptions + .LibPaths

	.Compiler = 'Compiler-MSVC-$Platform$'
	.Linker = '$VS2017ToolBinPath$$Platform$\$Platform$\link.exe'	
	.Librarian = '$VS2017ToolBinPath$$Platform$\$Platform$\lib.exe'
]
#else
.GCCBuilderCommonConfig =
[
	.Compiler = 'Compiler-GCC'
	.CompilerOptions = ' -std=c++$CppStandard$'
		+ ' -o "%2" "%1"' ; output + input
		+ ' -c' ; don't run linker
		+ ' -D__LINUX__ -D__linux__' ; linux defines
		+ ' -Wall -Wextra' ; errors
		;+ ' -Werror' ; add later

	.LibPaths = ''

	.Linker = '$GCCBinariesPath$/g++'
	.LinkerOptions = ' "%1" -o "%2"' ; input + output

	.Librarian = '$GCCBinariesPath$/ar'
	.LibrarianOptions = ' rcs "%2" "%1"'
]

.GCCBuilderConfig_x64 =
[
	.Platform = 'x64'
	Using(.GCCBuilderCommonConfig)
	.CompilerOptions + ' -m64'
]
.GCCBuilderConfig_x86 =
[
	.Platform = 'x86'
	Using(.GCCBuilderCommonConfig)
	.CompilerOptions + ' -m32'
]
#endif


.PlatformConfigPairs = {}
ForEach(.Plt in .Platforms)
{
#if __WINDOWS__ ; generate configs for MSVC
	.PlatformConfigPairDebug = 
	[
		.Platform = .DefaultPlatform
		.Config = 'MSVC-Debug-$Plt$'
		.BuilderConfig = ."MSVCBuilderConfig_$Plt$"
		.AdditionalCompilerFlags = ' /MTd /Od /RTC1 /GS /Oy- /EHscr /DDEBUG'
		.AdditionalLinkerFlags = ''
		.AdditionalLibrarianFlags = ''
	]
	^PlatformConfigPairs + .PlatformConfigPairDebug
	
	.PlatformConfigPairRelease = 
	[
		.Platform = .DefaultPlatform
		.Config = 'MSVC-Release-$Plt$'
		.BuilderConfig = ."MSVCBuilderConfig_$Plt$"
		.AdditionalCompilerFlags = ' /MT /Ox /Oy /Oi /GS- /GF /GL /Gy /Gw /EHsc /DRELEASE'
		.AdditionalLinkerFlags = ' /LTCG /OPT:REF,ICF'
		.AdditionalLibrarianFlags = ' /LTCG'
	]
	^PlatformConfigPairs + .PlatformConfigPairRelease
#else ; generate configs for GCC
	.PlatformConfigPairDebug =
	[
		.Platform = .Plt
		.Config = 'GCC-Debug-$Plt$'
		.BuilderConfig = ."GCCBuilderConfig_$Plt$"
		.AdditionalCompilerFlags = ' -g -O0 -D DEBUG'
		.AdditionalLinkerFlags = ''
		.AdditionalLibrarianFlags = ''
	]
	^PlatformConfigPairs + .PlatformConfigPairDebug

	.PlatformConfigPairRelease =
	[
		.Platform = .Plt
		.Config = 'GCC-Release-$Plt$'
		.BuilderConfig = ."GCCBuilderConfig_$Plt$"
		.AdditionalCompilerFlags = ' -O3 -D RELEASE'
		.AdditionalLinkerFlags = ''
		.AdditionalLibrarianFlags = ''
	]
	^PlatformConfigPairs + .PlatformConfigPairRelease
#endif
}
